{"version":3,"file":"ngx-ellipsis.umd.js","sources":["../../../projects/ngx-ellipsis/src/lib/directives/ellipsis.directive.ts","../../../projects/ngx-ellipsis/src/lib/ellipsis.module.ts","../../../projects/ngx-ellipsis/src/public_api.ts","../../../projects/ngx-ellipsis/src/ngx-ellipsis.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  NgZone,\r\n  OnChanges,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  Inject,\r\n  PLATFORM_ID,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { ResizeObserver as ResizeObserverPonyfill } from '@juggle/resize-observer';\r\nimport { take } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n\r\nlet ResizeObserver = ResizeObserverPonyfill;\r\n\r\n/**\r\n * Directive to truncate the contained text, if it exceeds the element's boundaries\r\n * and append characters (configurable, default '...') if so.\r\n */\r\n@Directive({\r\n  selector: '[ellipsis]',\r\n  exportAs: 'ellipsis'\r\n})\r\nexport class EllipsisDirective implements OnChanges, OnDestroy, AfterViewInit {\r\n  /**\r\n   * The original text (not truncated yet)\r\n   */\r\n  private originalText: string;\r\n\r\n  /**\r\n   * The referenced element\r\n   */\r\n  private elem: any;\r\n\r\n  /**\r\n   * Inner div element (will be auto-created)\r\n   */\r\n  private innerElem: any;\r\n\r\n  /**\r\n   * Anchor tag wrapping the `ellipsisCharacters`\r\n   */\r\n  private moreAnchor: HTMLAnchorElement;\r\n\r\n  private previousDimensions: {\r\n    width: number,\r\n    height: number\r\n  };\r\n\r\n  /**\r\n   * Subject triggered when resize listeners should be removed\r\n   */\r\n  private removeResizeListeners$ = new Subject<void>();\r\n\r\n  /**\r\n   * Remove function for the currently registered click listener\r\n   * on the link `this.ellipsisCharacters` are wrapped in.\r\n   */\r\n  private destroyMoreClickListener: () => void;\r\n\r\n  /**\r\n   * The ellipsis html attribute\r\n   * If anything is passed, this will be used as a string to append to\r\n   * the truncated contents.\r\n   * Else '...' will be appended.\r\n   */\r\n  @Input('ellipsis') ellipsisCharacters: string;\r\n\r\n  /**\r\n   * The ellipsis-content html attribute\r\n   * If passed this is used as content, else contents\r\n   * are fetched from textContent\r\n   */\r\n  @Input('ellipsis-content') ellipsisContent: string | number = null;\r\n\r\n  /**\r\n   * The ellipsis-word-boundaries html attribute\r\n   * If anything is passed, each character will be interpreted\r\n   * as a word boundary at which the text may be truncated.\r\n   * Else the text may be truncated at any character.\r\n   */\r\n  @Input('ellipsis-word-boundaries') ellipsisWordBoundaries: string;\r\n\r\n  /**\r\n   * Function to use for string splitting. Defaults to the native `String#substr`.\r\n   * (This may for example be used to avoid splitting surrogate pairs- used by some emojis -\r\n   * by providing a lib such as runes.)\r\n   */\r\n  @Input('ellipsis-substr-fn') ellipsisSubstrFn:  (str: string, from: number, length?: number) => string;\r\n\r\n  /**\r\n   * The ellipsis-resize-detection html attribute\r\n   * Algorithm to use to detect element/window resize - any of the following:\r\n   * 'resize-observer': (default) Use native ResizeObserver - see\r\n   *    https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\r\n   *    and https://github.com/juggle/resize-observer\r\n   * 'window': Only check if the whole window has been resized/changed orientation by using angular's built-in HostListener\r\n   */\r\n  @Input('ellipsis-resize-detection') resizeDetectionStrategy:\r\n    '' | 'manual' | 'resize-observer' | 'window';\r\n\r\n  /**\r\n   * The ellipsis-click-more html attribute\r\n   * If anything is passed, the ellipsisCharacters will be\r\n   * wrapped in <a></a> tags and an event handler for the\r\n   * passed function will be added to the link\r\n   */\r\n  @Output('ellipsis-click-more') moreClickEmitter: EventEmitter<MouseEvent> = new EventEmitter();\r\n\r\n\r\n  /**\r\n   * The ellipsis-change html attribute\r\n   * This emits after which index the text has been truncated.\r\n   * If it hasn't been truncated, null is emitted.\r\n   */\r\n  @Output('ellipsis-change') changeEmitter: EventEmitter<number> = new EventEmitter();\r\n\r\n  /**\r\n   * Utility method to quickly find the largest number for\r\n   * which `callback(number)` still returns true.\r\n   * @param  max      Highest possible number\r\n   * @param  callback Should return true as long as the passed number is valid\r\n   * @return          Largest possible number\r\n   */\r\n  private static numericBinarySearch(max: number, callback: (n: number) => boolean): number {\r\n    let low = 0;\r\n    let high = max;\r\n    let best = -1;\r\n    let mid: number;\r\n\r\n    while (low <= high) {\r\n      // tslint:disable-next-line:no-bitwise\r\n      mid = ~~((low + high) / 2);\r\n      const result = callback(mid);\r\n      if (!result) {\r\n        high = mid - 1;\r\n      } else {\r\n        best = mid;\r\n        low = mid + 1;\r\n      }\r\n    }\r\n\r\n    return best;\r\n  }\r\n\r\n  /**\r\n   * Convert ellipsis input to string\r\n   * @param input string or number to be displayed as an ellipsis\r\n   * @return      input converted to string\r\n   */\r\n  private static convertEllipsisInputToString(input: string | number): string {\r\n    if (typeof input === 'undefined' || input === null) {\r\n      return '';\r\n    }\r\n\r\n    return String(input);\r\n  }\r\n\r\n  /**\r\n   * The directive's constructor\r\n   */\r\n  public constructor(\r\n    private elementRef: ElementRef<HTMLElement>,\r\n    private renderer: Renderer2,\r\n    private ngZone: NgZone,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) { }\r\n\r\n  /**\r\n   * Angular's init view life cycle hook.\r\n   * Initializes the element for displaying the ellipsis.\r\n   */\r\n  ngAfterViewInit() {\r\n    if (!isPlatformBrowser(this.platformId)) {\r\n      // in angular universal we don't have access to the ugly\r\n      // DOM manipulation properties we sadly need to access here,\r\n      // so wait until we're in the browser:\r\n      return;\r\n    }\r\n\r\n    // Prefer native ResizeObserver over ponyfill, if available:\r\n    if ((<any> window).ResizeObserver != null) {\r\n      ResizeObserver = (<any> window).ResizeObserver;\r\n    }\r\n\r\n    // let the ellipsis characters default to '...':\r\n    if (this.ellipsisCharacters === '') {\r\n      this.ellipsisCharacters = '...';\r\n    }\r\n\r\n    // create more anchor element:\r\n    this.moreAnchor = <HTMLAnchorElement> this.renderer.createElement('a');\r\n    this.moreAnchor.className = 'ngx-ellipsis-more';\r\n    this.moreAnchor.href = '#';\r\n    this.moreAnchor.textContent = this.ellipsisCharacters;\r\n\r\n    // perform regex replace on word boundaries:\r\n    if (!this.ellipsisWordBoundaries) {\r\n      this.ellipsisWordBoundaries = '';\r\n    }\r\n    this.ellipsisWordBoundaries = '[' + this.ellipsisWordBoundaries.replace(/\\\\n/, '\\n').replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + ']';\r\n\r\n    if (!this.ellipsisSubstrFn) {\r\n      this.ellipsisSubstrFn = (str: string, from: number, length?: number) => {\r\n        return str.substr(from, length);\r\n      }\r\n    }\r\n\r\n    // store the original contents of the element:\r\n    this.elem = this.elementRef.nativeElement;\r\n    if (typeof this.ellipsisContent !== 'undefined' && this.ellipsisContent !== null) {\r\n      this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);\r\n    } else if (!this.originalText) {\r\n      this.originalText = this.elem.textContent.trim();\r\n    }\r\n\r\n    // add a wrapper div (required for resize events to work properly):\r\n    this.renderer.setProperty(this.elem, 'innerHTML', '');\r\n    this.innerElem = this.renderer.createElement('p');\r\n    this.renderer.addClass(this.innerElem, 'ngx-ellipsis-inner');\r\n    const text = this.renderer.createText(this.originalText);\r\n    this.renderer.appendChild(this.innerElem, text);\r\n    this.renderer.appendChild(this.elem, this.innerElem);\r\n\r\n    this.previousDimensions = {\r\n      width: this.elem.clientWidth,\r\n      height: this.elem.clientHeight\r\n    };\r\n\r\n    // start listening for resize events:\r\n    this.addResizeListener(true);\r\n  }\r\n\r\n  /**\r\n   * Angular's change life cycle hook.\r\n   * Change original text (if the ellipsis-content has been passed)\r\n   * and re-render\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const moreAnchorRequiresChange = this.moreAnchor && changes['ellipsisCharacters'];\r\n    if (moreAnchorRequiresChange) {\r\n      this.moreAnchor.textContent = this.ellipsisCharacters;\r\n    }\r\n\r\n    if (this.elem\r\n        && typeof this.ellipsisContent !== 'undefined'\r\n        && (\r\n          this.originalText !== EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent)\r\n          || moreAnchorRequiresChange\r\n        )\r\n    ) {\r\n      this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);\r\n      this.applyEllipsis();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Angular's destroy life cycle hook.\r\n   * Remove event listeners\r\n   */\r\n  ngOnDestroy() {\r\n    // In angular universal we don't have any listeners hooked up (all requiring ugly DOM manipulation methods),\r\n    // so we only need to remove them, if we're inside the browser:\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.removeAllListeners();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * remove all resize listeners\r\n   */\r\n  private removeAllListeners() {\r\n    if (this.destroyMoreClickListener) {\r\n      this.destroyMoreClickListener();\r\n    }\r\n\r\n    this.removeResizeListeners$.next();\r\n    this.removeResizeListeners$.complete();\r\n  }\r\n\r\n\r\n  /**\r\n   * Set up an event listener to call applyEllipsis() whenever a resize has been registered.\r\n   * The type of the listener (window/element) depends on the resizeDetectionStrategy.\r\n   * @param triggerNow=false if true, the ellipsis is applied immediately\r\n   */\r\n  private addResizeListener(triggerNow = false) {\r\n    if (typeof (this.resizeDetectionStrategy) === 'undefined') {\r\n      this.resizeDetectionStrategy = '';\r\n    }\r\n\r\n    switch (this.resizeDetectionStrategy) {\r\n      case 'manual':\r\n        // Users will trigger applyEllipsis via the public API\r\n        break;\r\n      case 'window':\r\n        this.addWindowResizeListener();\r\n        break;\r\n      default:\r\n        if (typeof (console) !== 'undefined') {\r\n          console.warn(\r\n            `No such ellipsis-resize-detection strategy: '${this.resizeDetectionStrategy}'. Using 'resize-observer' instead`\r\n          );\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case 'resize-observer':\r\n      case '':\r\n        this.addElementResizeListener();\r\n        break;\r\n    }\r\n\r\n    if (triggerNow && this.resizeDetectionStrategy !== 'manual') {\r\n      this.applyEllipsis();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up an event listener to call applyEllipsis() whenever the window gets resized.\r\n   */\r\n  private addWindowResizeListener() {\r\n    const removeWindowResizeListener = this.renderer.listen('window', 'resize', () => {\r\n      this.ngZone.run(() => {\r\n        this.applyEllipsis();\r\n      });\r\n    });\r\n\r\n    this.removeResizeListeners$.pipe(take(1)).subscribe(() => removeWindowResizeListener());\r\n  }\r\n\r\n  /**\r\n   * Set up an event listener to call applyEllipsis() whenever the element\r\n   * has been resized.\r\n   */\r\n  private addElementResizeListener() {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      window.requestAnimationFrame(() => {\r\n        if (this.previousDimensions.width !== this.elem.clientWidth || this.previousDimensions.height !== this.elem.clientHeight) {\r\n          this.ngZone.run(() => {\r\n            this.applyEllipsis();\r\n          });\r\n\r\n          this.previousDimensions.width = this.elem.clientWidth;\r\n          this.previousDimensions.height = this.elem.clientHeight;\r\n        }\r\n      });\r\n    });\r\n    resizeObserver.observe(this.elem);\r\n    this.removeResizeListeners$.pipe(take(1)).subscribe(() => resizeObserver.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Get the original text's truncated version. If the text really needed to\r\n   * be truncated, this.ellipsisCharacters will be appended.\r\n   * @param max the maximum length the text may have\r\n   * @return string       the truncated string\r\n   */\r\n  private getTruncatedText(max: number): string {\r\n    if (!this.originalText || this.originalText.length <= max) {\r\n      return this.originalText;\r\n    }\r\n\r\n    const truncatedText = this.ellipsisSubstrFn(this.originalText, 0, max);\r\n    if (this.ellipsisWordBoundaries === '[]' || this.originalText.charAt(max).match(this.ellipsisWordBoundaries)) {\r\n      return truncatedText;\r\n    }\r\n\r\n    let i = max - 1;\r\n    while (i > 0 && !truncatedText.charAt(i).match(this.ellipsisWordBoundaries)) {\r\n      i--;\r\n    }\r\n    return this.ellipsisSubstrFn(truncatedText, 0, i);\r\n  }\r\n\r\n  /**\r\n   * Set the truncated text to be displayed in the inner div\r\n   * @param max the maximum length the text may have\r\n   * @param addMoreListener=false listen for click on the ellipsisCharacters anchor tag if the text has been truncated\r\n   * @returns length of remaining text (excluding the ellipsisCharacters, if they were added)\r\n   */\r\n  private truncateText(max: number, addMoreListener = false): number {\r\n    let text = this.getTruncatedText(max);\r\n    const truncatedLength = text.length;\r\n    const textTruncated = (truncatedLength !== this.originalText.length);\r\n\r\n    if (textTruncated && !this.showMoreLink) {\r\n      text += this.ellipsisCharacters;\r\n    }\r\n\r\n    this.renderer.setProperty(this.innerElem, 'textContent', text);\r\n\r\n    if (textTruncated && this.showMoreLink) {\r\n      this.renderer.appendChild(this.innerElem, this.moreAnchor);\r\n    }\r\n\r\n    // Remove any existing more click listener:\r\n    if (this.destroyMoreClickListener) {\r\n      this.destroyMoreClickListener();\r\n      this.destroyMoreClickListener = null;\r\n    }\r\n\r\n    // If the text has been truncated, add a more click listener:\r\n    if (addMoreListener && textTruncated) {\r\n      this.destroyMoreClickListener = this.renderer.listen(this.moreAnchor, 'click', (e: MouseEvent) => {\r\n        if (!e.target || !(<HTMLElement> e.target).classList.contains('ngx-ellipsis-more')) {\r\n          return;\r\n        }\r\n        e.preventDefault();\r\n        this.moreClickEmitter.emit(e);\r\n      });\r\n    }\r\n\r\n    return truncatedLength;\r\n  }\r\n\r\n  /**\r\n   * Display ellipsis in the inner div if the text would exceed the boundaries\r\n   */\r\n  public applyEllipsis() {\r\n    // Remove the resize listener as changing the contained text would trigger events:\r\n    this.removeResizeListeners$.next();\r\n\r\n    // Find the best length by trial and error:\r\n    const maxLength = EllipsisDirective.numericBinarySearch(this.originalText.length, curLength => {\r\n      this.truncateText(curLength);\r\n      return !this.isOverflowing;\r\n    });\r\n\r\n    // Apply the best length:\r\n    const finalLength = this.truncateText(maxLength, this.showMoreLink);\r\n\r\n    // Re-attach the resize listener:\r\n    this.addResizeListener();\r\n\r\n    // Emit change event:\r\n    if (this.changeEmitter.observers.length > 0) {\r\n      this.changeEmitter.emit(\r\n        (this.originalText.length === finalLength) ? null : finalLength\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Whether the text is exceeding the element's boundaries or not\r\n   */\r\n  private get isOverflowing(): boolean {\r\n    // Enforce hidden overflow (required to compare client width/height with scroll width/height)\r\n    const currentOverflow = this.elem.style.overflow;\r\n    if (!currentOverflow || currentOverflow === 'visible') {\r\n      this.elem.style.overflow = 'hidden';\r\n    }\r\n\r\n    const isOverflowing = this.elem.clientWidth < this.elem.scrollWidth - 1 || this.elem.clientHeight < this.elem.scrollHeight - 1;\r\n\r\n    // Reset overflow to the original configuration:\r\n    this.elem.style.overflow = currentOverflow;\r\n\r\n    return isOverflowing;\r\n  }\r\n\r\n  /**\r\n   * Whether the `ellipsisCharacters` are to be wrapped inside an anchor tag (if they are shown at all)\r\n   */\r\n  private get showMoreLink(): boolean {\r\n    return (this.moreClickEmitter.observers.length > 0);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { EllipsisDirective } from './directives/ellipsis.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [EllipsisDirective],\r\n  exports: [EllipsisDirective]\r\n})\r\nexport class EllipsisModule { }\r\n","/*\r\n * Public API Surface of ngx-ellipsis\r\n */\r\n\r\nexport * from './lib/directives/ellipsis.directive';\r\nexport * from './lib/ellipsis.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["ResizeObserverPonyfill","Subject","EventEmitter","isPlatformBrowser","take","Directive","ElementRef","Renderer2","NgZone","Inject","PLATFORM_ID","Input","Output","NgModule"],"mappings":"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"}