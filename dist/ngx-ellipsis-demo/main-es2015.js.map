{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./projects/ngx-ellipsis/src/lib/directives/ellipsis.directive.ts","./projects/ngx-ellipsis/src/lib/ellipsis.module.ts","./projects/ngx-ellipsis/src/public_api.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import {\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  NgZone,\r\n  OnChanges,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  Inject,\r\n  PLATFORM_ID,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { ResizeObserver as ResizeObserverPonyfill } from '@juggle/resize-observer';\r\nimport { take } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n\r\nlet ResizeObserver = ResizeObserverPonyfill;\r\n\r\n/**\r\n * Directive to truncate the contained text, if it exceeds the element's boundaries\r\n * and append characters (configurable, default '...') if so.\r\n */\r\n@Directive({\r\n  selector: '[ellipsis]',\r\n  exportAs: 'ellipsis'\r\n})\r\nexport class EllipsisDirective implements OnChanges, OnDestroy, AfterViewInit {\r\n  /**\r\n   * The original text (not truncated yet)\r\n   */\r\n  private originalText: string;\r\n\r\n  /**\r\n   * The referenced element\r\n   */\r\n  private elem: any;\r\n\r\n  /**\r\n   * Inner div element (will be auto-created)\r\n   */\r\n  private innerElem: any;\r\n\r\n  /**\r\n   * Anchor tag wrapping the `ellipsisCharacters`\r\n   */\r\n  private moreAnchor: HTMLAnchorElement;\r\n\r\n  private previousDimensions: {\r\n    width: number,\r\n    height: number\r\n  };\r\n\r\n  /**\r\n   * Subject triggered when resize listeners should be removed\r\n   */\r\n  private removeResizeListeners$ = new Subject<void>();\r\n\r\n  /**\r\n   * Remove function for the currently registered click listener\r\n   * on the link `this.ellipsisCharacters` are wrapped in.\r\n   */\r\n  private destroyMoreClickListener: () => void;\r\n\r\n  /**\r\n   * The ellipsis html attribute\r\n   * If anything is passed, this will be used as a string to append to\r\n   * the truncated contents.\r\n   * Else '...' will be appended.\r\n   */\r\n  @Input('ellipsis') ellipsisCharacters: string;\r\n\r\n  /**\r\n   * The ellipsis-content html attribute\r\n   * If passed this is used as content, else contents\r\n   * are fetched from textContent\r\n   */\r\n  @Input('ellipsis-content') ellipsisContent: string | number = null;\r\n\r\n  /**\r\n   * The ellipsis-word-boundaries html attribute\r\n   * If anything is passed, each character will be interpreted\r\n   * as a word boundary at which the text may be truncated.\r\n   * Else the text may be truncated at any character.\r\n   */\r\n  @Input('ellipsis-word-boundaries') ellipsisWordBoundaries: string;\r\n\r\n  /**\r\n   * Function to use for string splitting. Defaults to the native `String#substr`.\r\n   * (This may for example be used to avoid splitting surrogate pairs- used by some emojis -\r\n   * by providing a lib such as runes.)\r\n   */\r\n  @Input('ellipsis-substr-fn') ellipsisSubstrFn:  (str: string, from: number, length?: number) => string;\r\n\r\n  /**\r\n   * The ellipsis-resize-detection html attribute\r\n   * Algorithm to use to detect element/window resize - any of the following:\r\n   * 'resize-observer': (default) Use native ResizeObserver - see\r\n   *    https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\r\n   *    and https://github.com/juggle/resize-observer\r\n   * 'window': Only check if the whole window has been resized/changed orientation by using angular's built-in HostListener\r\n   */\r\n  @Input('ellipsis-resize-detection') resizeDetectionStrategy:\r\n    '' | 'manual' | 'resize-observer' | 'window';\r\n\r\n  /**\r\n   * The ellipsis-click-more html attribute\r\n   * If anything is passed, the ellipsisCharacters will be\r\n   * wrapped in <a></a> tags and an event handler for the\r\n   * passed function will be added to the link\r\n   */\r\n  @Output('ellipsis-click-more') moreClickEmitter: EventEmitter<MouseEvent> = new EventEmitter();\r\n\r\n\r\n  /**\r\n   * The ellipsis-change html attribute\r\n   * This emits after which index the text has been truncated.\r\n   * If it hasn't been truncated, null is emitted.\r\n   */\r\n  @Output('ellipsis-change') changeEmitter: EventEmitter<number> = new EventEmitter();\r\n\r\n  /**\r\n   * Utility method to quickly find the largest number for\r\n   * which `callback(number)` still returns true.\r\n   * @param  max      Highest possible number\r\n   * @param  callback Should return true as long as the passed number is valid\r\n   * @return          Largest possible number\r\n   */\r\n  private static numericBinarySearch(max: number, callback: (n: number) => boolean): number {\r\n    let low = 0;\r\n    let high = max;\r\n    let best = -1;\r\n    let mid: number;\r\n\r\n    while (low <= high) {\r\n      // tslint:disable-next-line:no-bitwise\r\n      mid = ~~((low + high) / 2);\r\n      const result = callback(mid);\r\n      if (!result) {\r\n        high = mid - 1;\r\n      } else {\r\n        best = mid;\r\n        low = mid + 1;\r\n      }\r\n    }\r\n\r\n    return best;\r\n  }\r\n\r\n  /**\r\n   * Convert ellipsis input to string\r\n   * @param input string or number to be displayed as an ellipsis\r\n   * @return      input converted to string\r\n   */\r\n  private static convertEllipsisInputToString(input: string | number): string {\r\n    if (typeof input === 'undefined' || input === null) {\r\n      return '';\r\n    }\r\n\r\n    return String(input);\r\n  }\r\n\r\n  /**\r\n   * The directive's constructor\r\n   */\r\n  public constructor(\r\n    private elementRef: ElementRef<HTMLElement>,\r\n    private renderer: Renderer2,\r\n    private ngZone: NgZone,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) { }\r\n\r\n  /**\r\n   * Angular's init view life cycle hook.\r\n   * Initializes the element for displaying the ellipsis.\r\n   */\r\n  ngAfterViewInit() {\r\n    if (!isPlatformBrowser(this.platformId)) {\r\n      // in angular universal we don't have access to the ugly\r\n      // DOM manipulation properties we sadly need to access here,\r\n      // so wait until we're in the browser:\r\n      return;\r\n    }\r\n\r\n    // Prefer native ResizeObserver over ponyfill, if available:\r\n    if ((<any> window).ResizeObserver != null) {\r\n      ResizeObserver = (<any> window).ResizeObserver;\r\n    }\r\n\r\n    // let the ellipsis characters default to '...':\r\n    if (this.ellipsisCharacters === '') {\r\n      this.ellipsisCharacters = '...';\r\n    }\r\n\r\n    // create more anchor element:\r\n    this.moreAnchor = <HTMLAnchorElement> this.renderer.createElement('a');\r\n    this.moreAnchor.className = 'ngx-ellipsis-more';\r\n    this.moreAnchor.href = '#';\r\n    this.moreAnchor.textContent = this.ellipsisCharacters;\r\n\r\n    // perform regex replace on word boundaries:\r\n    if (!this.ellipsisWordBoundaries) {\r\n      this.ellipsisWordBoundaries = '';\r\n    }\r\n    this.ellipsisWordBoundaries = '[' + this.ellipsisWordBoundaries.replace(/\\\\n/, '\\n').replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + ']';\r\n\r\n    if (!this.ellipsisSubstrFn) {\r\n      this.ellipsisSubstrFn = (str: string, from: number, length?: number) => {\r\n        return str.substr(from, length);\r\n      }\r\n    }\r\n\r\n    // store the original contents of the element:\r\n    this.elem = this.elementRef.nativeElement;\r\n    if (typeof this.ellipsisContent !== 'undefined' && this.ellipsisContent !== null) {\r\n      this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);\r\n    } else if (!this.originalText) {\r\n      this.originalText = this.elem.textContent.trim();\r\n    }\r\n\r\n    // add a wrapper div (required for resize events to work properly):\r\n    this.renderer.setProperty(this.elem, 'innerHTML', '');\r\n    this.innerElem = this.renderer.createElement('p');\r\n    this.renderer.addClass(this.innerElem, 'ngx-ellipsis-inner');\r\n    const text = this.renderer.createText(this.originalText);\r\n    this.renderer.appendChild(this.innerElem, text);\r\n    this.renderer.appendChild(this.elem, this.innerElem);\r\n\r\n    this.previousDimensions = {\r\n      width: this.elem.clientWidth,\r\n      height: this.elem.clientHeight\r\n    };\r\n\r\n    // start listening for resize events:\r\n    this.addResizeListener(true);\r\n  }\r\n\r\n  /**\r\n   * Angular's change life cycle hook.\r\n   * Change original text (if the ellipsis-content has been passed)\r\n   * and re-render\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const moreAnchorRequiresChange = this.moreAnchor && changes['ellipsisCharacters'];\r\n    if (moreAnchorRequiresChange) {\r\n      this.moreAnchor.textContent = this.ellipsisCharacters;\r\n    }\r\n\r\n    if (this.elem\r\n        && typeof this.ellipsisContent !== 'undefined'\r\n        && (\r\n          this.originalText !== EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent)\r\n          || moreAnchorRequiresChange\r\n        )\r\n    ) {\r\n      this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);\r\n      this.applyEllipsis();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Angular's destroy life cycle hook.\r\n   * Remove event listeners\r\n   */\r\n  ngOnDestroy() {\r\n    // In angular universal we don't have any listeners hooked up (all requiring ugly DOM manipulation methods),\r\n    // so we only need to remove them, if we're inside the browser:\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.removeAllListeners();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * remove all resize listeners\r\n   */\r\n  private removeAllListeners() {\r\n    if (this.destroyMoreClickListener) {\r\n      this.destroyMoreClickListener();\r\n    }\r\n\r\n    this.removeResizeListeners$.next();\r\n    this.removeResizeListeners$.complete();\r\n  }\r\n\r\n\r\n  /**\r\n   * Set up an event listener to call applyEllipsis() whenever a resize has been registered.\r\n   * The type of the listener (window/element) depends on the resizeDetectionStrategy.\r\n   * @param triggerNow=false if true, the ellipsis is applied immediately\r\n   */\r\n  private addResizeListener(triggerNow = false) {\r\n    if (typeof (this.resizeDetectionStrategy) === 'undefined') {\r\n      this.resizeDetectionStrategy = '';\r\n    }\r\n\r\n    switch (this.resizeDetectionStrategy) {\r\n      case 'manual':\r\n        // Users will trigger applyEllipsis via the public API\r\n        break;\r\n      case 'window':\r\n        this.addWindowResizeListener();\r\n        break;\r\n      default:\r\n        if (typeof (console) !== 'undefined') {\r\n          console.warn(\r\n            `No such ellipsis-resize-detection strategy: '${this.resizeDetectionStrategy}'. Using 'resize-observer' instead`\r\n          );\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case 'resize-observer':\r\n      case '':\r\n        this.addElementResizeListener();\r\n        break;\r\n    }\r\n\r\n    if (triggerNow && this.resizeDetectionStrategy !== 'manual') {\r\n      this.applyEllipsis();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up an event listener to call applyEllipsis() whenever the window gets resized.\r\n   */\r\n  private addWindowResizeListener() {\r\n    const removeWindowResizeListener = this.renderer.listen('window', 'resize', () => {\r\n      this.ngZone.run(() => {\r\n        this.applyEllipsis();\r\n      });\r\n    });\r\n\r\n    this.removeResizeListeners$.pipe(take(1)).subscribe(() => removeWindowResizeListener());\r\n  }\r\n\r\n  /**\r\n   * Set up an event listener to call applyEllipsis() whenever the element\r\n   * has been resized.\r\n   */\r\n  private addElementResizeListener() {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      window.requestAnimationFrame(() => {\r\n        if (this.previousDimensions.width !== this.elem.clientWidth || this.previousDimensions.height !== this.elem.clientHeight) {\r\n          this.ngZone.run(() => {\r\n            this.applyEllipsis();\r\n          });\r\n\r\n          this.previousDimensions.width = this.elem.clientWidth;\r\n          this.previousDimensions.height = this.elem.clientHeight;\r\n        }\r\n      });\r\n    });\r\n    resizeObserver.observe(this.elem);\r\n    this.removeResizeListeners$.pipe(take(1)).subscribe(() => resizeObserver.disconnect());\r\n  }\r\n\r\n  /**\r\n   * Get the original text's truncated version. If the text really needed to\r\n   * be truncated, this.ellipsisCharacters will be appended.\r\n   * @param max the maximum length the text may have\r\n   * @return string       the truncated string\r\n   */\r\n  private getTruncatedText(max: number): string {\r\n    if (!this.originalText || this.originalText.length <= max) {\r\n      return this.originalText;\r\n    }\r\n\r\n    const truncatedText = this.ellipsisSubstrFn(this.originalText, 0, max);\r\n    if (this.ellipsisWordBoundaries === '[]' || this.originalText.charAt(max).match(this.ellipsisWordBoundaries)) {\r\n      return truncatedText;\r\n    }\r\n\r\n    let i = max - 1;\r\n    while (i > 0 && !truncatedText.charAt(i).match(this.ellipsisWordBoundaries)) {\r\n      i--;\r\n    }\r\n    return this.ellipsisSubstrFn(truncatedText, 0, i);\r\n  }\r\n\r\n  /**\r\n   * Set the truncated text to be displayed in the inner div\r\n   * @param max the maximum length the text may have\r\n   * @param addMoreListener=false listen for click on the ellipsisCharacters anchor tag if the text has been truncated\r\n   * @returns length of remaining text (excluding the ellipsisCharacters, if they were added)\r\n   */\r\n  private truncateText(max: number, addMoreListener = false): number {\r\n    let text = this.getTruncatedText(max);\r\n    const truncatedLength = text.length;\r\n    const textTruncated = (truncatedLength !== this.originalText.length);\r\n\r\n    if (textTruncated && !this.showMoreLink) {\r\n      text += this.ellipsisCharacters;\r\n    }\r\n\r\n    this.renderer.setProperty(this.innerElem, 'textContent', text);\r\n\r\n    if (textTruncated && this.showMoreLink) {\r\n      this.renderer.appendChild(this.innerElem, this.moreAnchor);\r\n    }\r\n\r\n    // Remove any existing more click listener:\r\n    if (this.destroyMoreClickListener) {\r\n      this.destroyMoreClickListener();\r\n      this.destroyMoreClickListener = null;\r\n    }\r\n\r\n    // If the text has been truncated, add a more click listener:\r\n    if (addMoreListener && textTruncated) {\r\n      this.destroyMoreClickListener = this.renderer.listen(this.moreAnchor, 'click', (e: MouseEvent) => {\r\n        if (!e.target || !(<HTMLElement> e.target).classList.contains('ngx-ellipsis-more')) {\r\n          return;\r\n        }\r\n        e.preventDefault();\r\n        this.moreClickEmitter.emit(e);\r\n      });\r\n    }\r\n\r\n    return truncatedLength;\r\n  }\r\n\r\n  /**\r\n   * Display ellipsis in the inner div if the text would exceed the boundaries\r\n   */\r\n  public applyEllipsis() {\r\n    // Remove the resize listener as changing the contained text would trigger events:\r\n    this.removeResizeListeners$.next();\r\n\r\n    // Find the best length by trial and error:\r\n    const maxLength = EllipsisDirective.numericBinarySearch(this.originalText.length, curLength => {\r\n      this.truncateText(curLength);\r\n      return !this.isOverflowing;\r\n    });\r\n\r\n    // Apply the best length:\r\n    const finalLength = this.truncateText(maxLength, this.showMoreLink);\r\n\r\n    // Re-attach the resize listener:\r\n    this.addResizeListener();\r\n\r\n    // Emit change event:\r\n    if (this.changeEmitter.observers.length > 0) {\r\n      this.changeEmitter.emit(\r\n        (this.originalText.length === finalLength) ? null : finalLength\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Whether the text is exceeding the element's boundaries or not\r\n   */\r\n  private get isOverflowing(): boolean {\r\n    // Enforce hidden overflow (required to compare client width/height with scroll width/height)\r\n    const currentOverflow = this.elem.style.overflow;\r\n    if (!currentOverflow || currentOverflow === 'visible') {\r\n      this.elem.style.overflow = 'hidden';\r\n    }\r\n\r\n    const isOverflowing = this.elem.clientWidth < this.elem.scrollWidth - 1 || this.elem.clientHeight < this.elem.scrollHeight - 1;\r\n\r\n    // Reset overflow to the original configuration:\r\n    this.elem.style.overflow = currentOverflow;\r\n\r\n    return isOverflowing;\r\n  }\r\n\r\n  /**\r\n   * Whether the `ellipsisCharacters` are to be wrapped inside an anchor tag (if they are shown at all)\r\n   */\r\n  private get showMoreLink(): boolean {\r\n    return (this.moreClickEmitter.observers.length > 0);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { EllipsisDirective } from './directives/ellipsis.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [EllipsisDirective],\r\n  exports: [EllipsisDirective]\r\n})\r\nexport class EllipsisModule { }\r\n","/*\r\n * Public API Surface of ngx-ellipsis\r\n */\r\n\r\nexport * from './lib/directives/ellipsis.directive';\r\nexport * from './lib/ellipsis.module';\r\n","<h1>Welcome to ngx-ellipsis-demo!</h1>\r\n<h2>With fixed widths (drag bottom right corners to resize):</h2>\r\n<div class=\"samples fixed\">\r\n  <div class=\"sample\" ellipsis>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</div>\r\n  <div class=\"sample\" ellipsis [ellipsis-content]=\"longText\"></div>\r\n  <div class=\"sample small\" ellipsis [ellipsis-content]=\"number\"></div>\r\n</div>\r\n\r\n<h2>With percentage widths (resize window horizontally or boxes vertically to see changes in ellipsis):</h2>\r\n<div class=\"samples flex\">\r\n  <div class=\"sample\" ellipsis>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</div>\r\n  <div class=\"sample\" ellipsis [ellipsis-content]=\"longText\"></div>\r\n  <div class=\"sample small\" ellipsis [ellipsis-content]=\"number\"></div>\r\n</div>\r\n\r\n<h2>With a \"more\" click listener:</h2>\r\n<div *ngIf=\"showEllipsis; else noEllipsis\" class=\"samples fixed\">\r\n  <div\r\n    ellipsis=\"... Show more!\"\r\n    [ellipsis-content]=\"longText\"\r\n    (ellipsis-click-more)=\"showEllipsis = false\"\r\n    class=\"sample\"></div>\r\n</div>\r\n\r\n<ng-template #noEllipsis>\r\n  <div class=\"longText\">\r\n    {{longText}}\r\n    <button (click)=\"showEllipsis = true\">Show less</button>\r\n  </div>\r\n</ng-template>\r\n\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'ngx-ellipsis-demo';\r\n  longText = 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna \\\r\n              aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea\\\r\n              takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy \\\r\n              eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo \\\r\n              dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.';\r\n  number = 12.4564564564564564;\r\n\r\n  showEllipsis = true;\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { EllipsisModule } from '../../projects/ngx-ellipsis/src/public_api';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    EllipsisModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}